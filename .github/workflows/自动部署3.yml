name: 自动部署 SAP3

on:
  workflow_dispatch:  # 手动触发
    inputs:
      environment:
        description: '选择部署环境'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      app_name:
        description: '应用名称（可选，留空则使用默认固定名称）'
        required: false
        default: ''
  schedule:
    - cron: '0 0 * * *'  # 每天凌晨0点定时触发（UTC时间）
  push:
    branches: [ main ]
    paths:
      - '**.cf'  # 当推送包含 .cf 后缀的文件时触发

env:
  IMAGE: ghcr.io/pwh123/nodejs:main  # 部署镜像
  MEMORY: 512M  # 应用内存配置
  BASE_PREFIX_SG: "sgsapfixd"  # 新加坡应用名称前缀
  BASE_PREFIX_US: "ussapfixd"  # 美国应用名称前缀
  SG_SPACE_NAME: "dev"  # 新加坡空间名称
  US_SPACE_NAME: "dev"  # 美国空间名称
  SG_API_ENDPOINT: "https://api.cf.ap21.hana.ondemand.com"  # 新加坡API端点
  US_API_ENDPOINT: "https://api.cf.us10-001.hana.ondemand.com"  # 美国API端点

jobs:
  deploy_sg:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 安装Cloud Foundry CLI
        run: |
          wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
          echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
          sudo apt-get update
          sudo apt-get install -y cf8-cli
          cf --version  # 验证安装

      - name: 新加坡区域 - 登录CF并创建空间
        run: |
          # 登录CF API端点
          if ! cf login -a "${{ env.SG_API_ENDPOINT }}" -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}" -o "${{ secrets.SG_ORG }}"; then
            echo "登录失败，请检查凭据或API端点"
            exit 1
          fi
          
          # 检查并创建空间
          if ! cf space ${{ env.SG_SPACE_NAME }} >/dev/null 2>&1; then
            echo "创建新加坡空间 ${{ env.SG_SPACE_NAME }}..."
            cf create-space ${{ env.SG_SPACE_NAME }} || { echo "空间创建失败"; exit 1; }
          else
            echo "新加坡空间 ${{ env.SG_SPACE_NAME }} 已存在"
          fi
          
          # 切换到目标空间
          cf target -s ${{ env.SG_SPACE_NAME }}

      - name: 新加坡区域 - 确定应用名称
        run: |
          if [ -n "${{ github.event.inputs.app_name }}" ]; then
            APP_NAME="${{ env.BASE_PREFIX_SG }}${{ github.event.inputs.app_name }}"
          else
            APP_NAME="${{ env.BASE_PREFIX_SG }}-${{ github.sha::8 }}"  # 追加Commit短哈希避免重名
          fi
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "应用名称: $APP_NAME"

      - name: 新加坡区域 - 部署应用
        run: |
          cf push ${{ env.APP_NAME }} \
            --docker-image ${{ env.IMAGE }} \
            -m ${{ env.MEMORY }} \
            --health-check-type port \
            --no-start  # 先不启动，待配置环境变量后再启动

      - name: 新加坡区域 - 配置环境变量
        run: |
          # 通用环境变量
          cf set-env ${{ env.APP_NAME }} NAME "SAP"
          cf set-env ${{ env.APP_NAME }} NEZHA_SERVER "${{ secrets.NEZHA_SERVER }}"
          cf set-env ${{ env.APP_NAME }} NEZHA_PORT "${{ secrets.NEZHA_PORT }}"
          cf set-env ${{ env.APP_NAME }} NEZHA_KEY "${{ secrets.NEZHA_KEY }}"
          cf set-env ${{ env.APP_NAME }} SUB_PATH "${{ secrets.SUB_PATH }}"
          cf set-env ${{ env.APP_NAME }} CFIP "${{ secrets.CFIP }}"
          cf set-env ${{ env.APP_NAME }} CFPORT "${{ secrets.CFPORT }}"
          cf set-env ${{ env.APP_NAME }} CHAT_ID "${{ secrets.CHAT_ID }}"
          cf set-env ${{ env.APP_NAME }} BOT_TOKEN "${{ secrets.BOT_TOKEN }}"
          
          # 新加坡区域特定变量
          cf set-env ${{ env.APP_NAME }} UUID "${{ secrets.UUID_SG }}"
          cf set-env ${{ env.APP_NAME }} ARGO_DOMAIN "${{ secrets.ARGO_DOMAIN_SG }}"
          cf set-env ${{ env.APP_NAME }} ARGO_AUTH "${{ secrets.ARGO_AUTH_SG }}"

      - name: 新加坡区域 - 启动应用并验证
        run: |
          cf start ${{ env.APP_NAME }}
          sleep 30  # 等待应用启动
          cf app ${{ env.APP_NAME }}  # 输出应用状态
          # 检查应用是否运行正常
          if ! cf app ${{ env.APP_NAME }} | grep -q "running"; then
            echo "应用启动失败"
            exit 1
          fi
          echo "新加坡区域部署完成！"

  deploy_us:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 安装Cloud Foundry CLI
        run: |
          wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
          echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
          sudo apt-get update
          sudo apt-get install -y cf8-cli
          cf --version  # 验证安装

      - name: 美国区域 - 登录CF并创建空间
        run: |
          # 登录CF API端点
          if ! cf login -a "${{ env.US_API_ENDPOINT }}" -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}" -o "${{ secrets.US_ORG }}"; then
            echo "登录失败，请检查凭据或API端点"
            exit 1
          fi
          
          # 检查并创建空间
          if ! cf space ${{ env.US_SPACE_NAME }} >/dev/null 2>&1; then
            echo "创建美国空间 ${{ env.US_SPACE_NAME }}..."
            cf create-space ${{ env.US_SPACE_NAME }} || { echo "空间创建失败"; exit 1; }
          else
            echo "美国空间 ${{ env.US_SPACE_NAME }} 已存在"
          fi
          
          # 切换到目标空间
          cf target -s ${{ env.US_SPACE_NAME }}

      - name: 美国区域 - 确定应用名称
        run: |
          if [ -n "${{ github.event.inputs.app_name }}" ]; then
            APP_NAME="${{ env.BASE_PREFIX_US }}${{ github.event.inputs.app_name }}"
          else
            APP_NAME="${{ env.BASE_PREFIX_US }}-${{ github.sha::8 }}"  # 追加Commit短哈希避免重名
          fi
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "应用名称: $APP_NAME"

      - name: 美国区域 - 部署应用
        run: |
          cf push ${{ env.APP_NAME }} \
            --docker-image ${{ env.IMAGE }} \
            -m ${{ env.MEMORY }} \
            --health-check-type port \
            --no-start  # 先不启动，待配置环境变量后再启动

      - name: 美国区域 - 配置环境变量
        run: |
          # 通用环境变量
          cf set-env ${{ env.APP_NAME }} NAME "SAP"
          cf set-env ${{ env.APP_NAME }} NEZHA_SERVER "${{ secrets.NEZHA_SERVER }}"
          cf set-env ${{ env.APP_NAME }} NEZHA_PORT "${{ secrets.NEZHA_PORT }}"
          cf set-env ${{ env.APP_NAME }} NEZHA_KEY "${{ secrets.NEZHA_KEY }}"
          cf set-env ${{ env.APP_NAME }} SUB_PATH "${{ secrets.SUB_PATH }}"
          cf set-env ${{ env.APP_NAME }} CFIP "${{ secrets.CFIP }}"
          cf set-env ${{ env.APP_NAME }} CFPORT "${{ secrets.CFPORT }}"
          cf set-env ${{ env.APP_NAME }} CHAT_ID "${{ secrets.CHAT_ID }}"
          cf set-env ${{ env.APP_NAME }} BOT_TOKEN "${{ secrets.BOT_TOKEN }}"
          
          # 美国区域特定变量
          cf set-env ${{ env.APP_NAME }} UUID "${{ secrets.UUID_US }}"
          cf set-env ${{ env.APP_NAME }} ARGO_DOMAIN "${{ secrets.ARGO_DOMAIN_US }}"
          cf set-env ${{ env.APP_NAME }} ARGO_AUTH "${{ secrets.ARGO_AUTH_US }}"

      - name: 美国区域 - 启动应用并验证
        run: |
          cf start ${{ env.APP_NAME }}
          sleep 30  # 等待应用启动
          cf app ${{ env.APP_NAME }}  # 输出应用状态
          # 检查应用是否运行正常
          if ! cf app ${{ env.APP_NAME }} | grep -q "running"; then
            echo "应用启动失败"
            exit 1
          fi
          echo "美国区域部署完成！"
