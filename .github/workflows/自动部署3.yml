name: 自动部署 SAP3

on:
  workflow_dispatch:  # 手动触发
    inputs:
      environment:
        description: '选择部署环境'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      app_name:
        description: '应用名称（可选，留空则使用默认固定名称）'
        required: false
        default: ''
  schedule:
    - cron: '0 0 * * *'  # 每天凌晨0点定时触发（UTC时间）
  push:
    branches: [ main ]
    paths:
      - '**.cf'  # 当推送包含 .cf 后缀的文件时触发

env:
  IMAGE: ghcr.io/pwh123/nodejs:main  # 仅保留镜像1
  MEMORY: 512M
  BASE_PREFIX_SG: "sgsapfixd"  # 新加坡基础前缀
  BASE_PREFIX_US: "ussapfixd"  # 美国基础前缀
  # 新增：定义要创建的空间名称（可根据环境动态调整）
  SG_SPACE_NAME: "dev"  # 新加坡空间名称
  US_SPACE_NAME: "dev"  # 美国空间名称

jobs:
  deploy_sg:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install CF CLI
      run: |
        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
        echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
        sudo apt-get update
        sudo apt-get install -y cf8-cli

    - name: SG | Login to Cloud Foundry & Create Space
      run: |
        # 登录到CF
        cf login -a "https://api.cf.ap21.hana.ondemand.com" -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}" -o "${{ secrets.SG_ORG }}"
        
        # 检查空间是否存在，不存在则创建
        if ! cf space ${{ env.SG_SPACE_NAME }} >/dev/null 2>&1; then
          echo "新加坡空间 ${{ env.SG_SPACE_NAME }} 不存在，正在创建..."
          cf create-space ${{ env.SG_SPACE_NAME }}
        else
          echo "新加坡空间 ${{ env.SG_SPACE_NAME }} 已存在"
        fi
        
        # 切换到目标空间
        cf target -s ${{ env.SG_SPACE_NAME }}

    - name: SG | Determine app name and image
      run: |
        if [ -n "${{ github.event.inputs.app_name }}" ]; then
          APP_NAME="${{ env.BASE_PREFIX_SG }}${{ github.event.inputs.app_name }}"
        else
          APP_NAME="${{ env.BASE_PREFIX_SG }}"
        fi
        
        echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
        echo "应用名称: $APP_NAME"

    - name: SG | Deploy application
      run: |
        cf push ${{ env.APP_NAME }} --docker-image ${{ env.IMAGE }} -m ${{ env.MEMORY }} --health-check-type port

    - name: SG | Set environment variables
      run: |
        # 通用环境变量
        cf set-env ${{ env.APP_NAME }} NAME "SAP"
        cf set-env ${{ env.APP_NAME }} NEZHA_SERVER "${{ secrets.NEZHA_SERVER }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_PORT "${{ secrets.NEZHA_PORT }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_KEY "${{ secrets.NEZHA_KEY }}"
        cf set-env ${{ env.APP_NAME }} SUB_PATH "${{ secrets.SUB_PATH }}"
        cf set-env ${{ env.APP_NAME }} CFIP "${{ secrets.CFIP }}"
        cf set-env ${{ env.APP_NAME }} CFPORT "${{ secrets.CFPORT }}"
        cf set-env ${{ env.APP_NAME }} CHAT_ID "${{ secrets.CHAT_ID }}"
        cf set-env ${{ env.APP_NAME }} BOT_TOKEN "${{ secrets.BOT_TOKEN }}"
        
        # 新加坡区域特定变量
        cf set-env ${{ env.APP_NAME }} UUID "${{ secrets.UUID_SG }}"
        cf set-env ${{ env.APP_NAME }} ARGO_DOMAIN "${{ secrets.ARGO_DOMAIN_SG }}"
        cf set-env ${{ env.APP_NAME }} ARGO_AUTH "${{ secrets.ARGO_AUTH_SG }}"

    - name: SG | Restage and verify
      run: |
        cf restage ${{ env.APP_NAME }}
        cf app ${{ env.APP_NAME }}
        echo "SG Deployment completed successfully!"

  deploy_us:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install CF CLI
      run: |
        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
        echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
        sudo apt-get update
        sudo apt-get install -y cf8-cli

    - name: US | Login to Cloud Foundry & Create Space
      run: |
        # 登录到CF
        cf login -a "https://api.cf.us10-001.hana.ondemand.com" -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}" -o "${{ secrets.US_ORG }}"
        
        # 检查空间是否存在，不存在则创建
        if ! cf space ${{ env.US_SPACE_NAME }} >/dev/null 2>&1; then
          echo "美国空间 ${{ env.US_SPACE_NAME }} 不存在，正在创建..."
          cf create-space ${{ env.US_SPACE_NAME }}
        else
          echo "美国空间 ${{ env.US_SPACE_NAME }} 已存在"
        fi
        
        # 切换到目标空间
        cf target -s ${{ env.US_SPACE_NAME }}

    - name: US | Determine app name and image
      run: |
        if [ -n "${{ github.event.inputs.app_name }}" ]; then
          APP_NAME="${{ env.BASE_PREFIX_US }}${{ github.event.inputs.app_name }}"
        else
          APP_NAME="${{ env.BASE_PREFIX_US }}"
        fi
        
        echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
        echo "应用名称: $APP_NAME"

    - name: US | Deploy application
      run: |
        cf push ${{ env.APP_NAME }} --docker-image ${{ env.IMAGE }} -m ${{ env.MEMORY }} --health-check-type port

    - name: US | Set environment variables
      run: |
        # 通用环境变量
        cf set-env ${{ env.APP_NAME }} NAME "SAP"
        cf set-env ${{ env.APP_NAME }} NEZHA_SERVER "${{ secrets.NEZHA_SERVER }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_PORT "${{ secrets.NEZHA_PORT }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_KEY "${{ secrets.NEZHA_KEY }}"
        cf set-env ${{ env.APP_NAME }} SUB_PATH "${{ secrets.SUB_PATH }}"
        cf set-env ${{ env.APP_NAME }} CFIP "${{ secrets.CFIP }}"
        cf set-env ${{ env.APP_NAME }} CFPORT "${{ secrets.CFPORT }}"
        cf set-env ${{ env.APP_NAME }} CHAT_ID "${{ secrets.CHAT_ID }}"
        cf set-env ${{ env.APP_NAME }} BOT_TOKEN "${{ secrets.BOT_TOKEN }}"

        # 美国区域特定变量
        cf set-env ${{ env.APP_NAME }} UUID "${{ secrets.UUID_US }}"
        cf set-env ${{ env.APP_NAME }} ARGO_DOMAIN "${{ secrets.ARGO_DOMAIN_US }}"
        cf set-env ${{ env.APP_NAME }} ARGO_AUTH "${{ secrets.ARGO_AUTH_US }}"

    - name: US | Restage and verify
      run: |
        cf restage ${{ env.APP_NAME }}
        cf app ${{ env.APP_NAME }}
        echo "US Deployment completed successfully!"
